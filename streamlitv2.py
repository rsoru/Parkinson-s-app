# -*- coding: utf-8 -*-
"""streamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13Ou9J9j0K31tEJaRlWj8rzuOaEiAzuo3
"""

# Parkinson's Monitoring Streamlit App (With Pickle Model)
# Features: Audio Upload → Feature Extraction → Prediction → Logging → Visualization


import streamlit as st
import pandas as pd
import numpy as np
import joblib
import os
import datetime
import parselmouth
import matplotlib.pyplot as plt
import plotly.express as px
import pickle

# Load model and scaler from pickle
with open("model/xgb_model.pkl", "rb") as f:
    model = pickle.load(f)

with open("model/scaler.pkl", "rb") as f:
    scaler = pickle.load(f)

# Feature extraction from voice using parselmouth (Praat)
def extract_features(wav_path):
    snd = parselmouth.Sound(wav_path)
    pitch = snd.to_pitch()
    pointProcess = parselmouth.praat.call(snd, "To PointProcess (periodic, cc)", 75, 500)

    jitter_local = parselmouth.praat.call([pointProcess], "Get jitter (local)", 0, 0, 0.0001, 0.02, 1.3)
    shimmer_local = parselmouth.praat.call([snd, pointProcess], "Get shimmer (local)", 0, 0, 0.0001, 0.02, 1.3, 1.6)
    hnr = parselmouth.praat.call(snd, "To Harmonicity (cc)", 0.01, 75, 0.1, 1.0)
    hnr_mean = parselmouth.praat.call(hnr, "Get mean", 0, 0)

    return [jitter_local, shimmer_local, hnr_mean]

# Title
st.title("Parkinson's Voice Monitor")
st.markdown("Upload your voice (.wav) to check for potential Parkinson’s biomarkers.")

# Upload voice file
uploaded_file = st.file_uploader("Upload a .wav file", type=["wav"])

if uploaded_file is not None:
    with open("temp.wav", "wb") as f:
        f.write(uploaded_file.read())
    st.audio("temp.wav")

    # Extract features
    try:
        features = extract_features("temp.wav")
        st.success("Features extracted: Jitter, Shimmer, HNR")

        # Prepare for prediction
        features_scaled = scaler.transform([features])
        prediction = model.predict(features_scaled)[0]
        prob = model.predict_proba(features_scaled)[0][1]

        label = "No Parkinson's detected" if prediction == 0 else "Potential Parkinson's signs"
        st.markdown(f"### Prediction: {label}")
        st.markdown(f"**Confidence:** {prob*100:.2f}%")

        # Alert logic
        if prob >= 0.8:
            st.warning("High confidence in abnormal vocal biomarkers. Please consult a specialist.")

        # Save to log
        log_entry = {
            "timestamp": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "jitter": features[0],
            "shimmer": features[1],
            "hnr": features[2],
            "confidence": prob,
            "prediction": prediction
        }

        log_path = "session_log.csv"
        if os.path.exists(log_path):
            log_df = pd.read_csv(log_path)
            log_df = pd.concat([log_df, pd.DataFrame([log_entry])], ignore_index=True)
        else:
            log_df = pd.DataFrame([log_entry])
        log_df.to_csv(log_path, index=False)

        # Show trends
        st.markdown("Monitoring Trends")
        fig = px.line(log_df, x="timestamp", y=["jitter", "shimmer", "hnr"], markers=True)
        st.plotly_chart(fig, use_container_width=True)

    except Exception as e:
        st.error(f"Error during feature extraction or prediction: {e}")

# Footer
st.markdown("---")
st.caption("This is a research prototype. Not a diagnostic tool.")